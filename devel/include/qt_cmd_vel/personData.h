// Generated by gencpp from file qt_cmd_vel/personData.msg
// DO NOT EDIT!


#ifndef QT_CMD_VEL_MESSAGE_PERSONDATA_H
#define QT_CMD_VEL_MESSAGE_PERSONDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qt_cmd_vel
{
template <class ContainerAllocator>
struct personData_
{
  typedef personData_<ContainerAllocator> Type;

  personData_()
    : header(0)
    , acdata()
    , heartrate(0)
    , spo2(0)
    , bk(0)
    , rsv1()
    , sdnn(0)
    , rmssd(0)
    , nn50(0)
    , pnn50(0)
    , rra()
    , rsv2(0)
    , state(0)  {
      acdata.assign(0);

      rsv1.assign(0);

      rra.assign(0);
  }
  personData_(const ContainerAllocator& _alloc)
    : header(0)
    , acdata()
    , heartrate(0)
    , spo2(0)
    , bk(0)
    , rsv1()
    , sdnn(0)
    , rmssd(0)
    , nn50(0)
    , pnn50(0)
    , rra()
    , rsv2(0)
    , state(0)  {
  (void)_alloc;
      acdata.assign(0);

      rsv1.assign(0);

      rra.assign(0);
  }



   typedef uint8_t _header_type;
  _header_type header;

   typedef boost::array<int8_t, 64>  _acdata_type;
  _acdata_type acdata;

   typedef uint8_t _heartrate_type;
  _heartrate_type heartrate;

   typedef uint8_t _spo2_type;
  _spo2_type spo2;

   typedef uint8_t _bk_type;
  _bk_type bk;

   typedef boost::array<uint8_t, 8>  _rsv1_type;
  _rsv1_type rsv1;

   typedef uint8_t _sdnn_type;
  _sdnn_type sdnn;

   typedef uint8_t _rmssd_type;
  _rmssd_type rmssd;

   typedef uint8_t _nn50_type;
  _nn50_type nn50;

   typedef uint8_t _pnn50_type;
  _pnn50_type pnn50;

   typedef boost::array<uint8_t, 6>  _rra_type;
  _rra_type rra;

   typedef uint8_t _rsv2_type;
  _rsv2_type rsv2;

   typedef uint8_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::qt_cmd_vel::personData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qt_cmd_vel::personData_<ContainerAllocator> const> ConstPtr;

}; // struct personData_

typedef ::qt_cmd_vel::personData_<std::allocator<void> > personData;

typedef boost::shared_ptr< ::qt_cmd_vel::personData > personDataPtr;
typedef boost::shared_ptr< ::qt_cmd_vel::personData const> personDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qt_cmd_vel::personData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qt_cmd_vel::personData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qt_cmd_vel::personData_<ContainerAllocator1> & lhs, const ::qt_cmd_vel::personData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.acdata == rhs.acdata &&
    lhs.heartrate == rhs.heartrate &&
    lhs.spo2 == rhs.spo2 &&
    lhs.bk == rhs.bk &&
    lhs.rsv1 == rhs.rsv1 &&
    lhs.sdnn == rhs.sdnn &&
    lhs.rmssd == rhs.rmssd &&
    lhs.nn50 == rhs.nn50 &&
    lhs.pnn50 == rhs.pnn50 &&
    lhs.rra == rhs.rra &&
    lhs.rsv2 == rhs.rsv2 &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qt_cmd_vel::personData_<ContainerAllocator1> & lhs, const ::qt_cmd_vel::personData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qt_cmd_vel

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qt_cmd_vel::personData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt_cmd_vel::personData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_cmd_vel::personData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_cmd_vel::personData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_cmd_vel::personData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_cmd_vel::personData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qt_cmd_vel::personData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b9dfbf73ccdfbf3d5b1a87f99434849";
  }

  static const char* value(const ::qt_cmd_vel::personData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b9dfbf73ccdfbf3ULL;
  static const uint64_t static_value2 = 0xd5b1a87f99434849ULL;
};

template<class ContainerAllocator>
struct DataType< ::qt_cmd_vel::personData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qt_cmd_vel/personData";
  }

  static const char* value(const ::qt_cmd_vel::personData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qt_cmd_vel::personData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 header        # 0xFF数据包头\n"
"int8[64] acdata     # 心律波形数据 (有符号)\n"
"uint8 heartrate     # 心率\n"
"uint8 spo2          # 血氧\n"
"uint8 bk            # 微循环\n"
"uint8[8] rsv1       # 保留数据 1\n"
"uint8 sdnn          # 心率变异性\n"
"uint8 rmssd\n"
"uint8 nn50\n"
"uint8 pnn50\n"
"uint8[6] rra        # RR间期\n"
"uint8 rsv2          # 保留数据 2\n"
"uint8 state         # 模块状态\n"
;
  }

  static const char* value(const ::qt_cmd_vel::personData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qt_cmd_vel::personData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.acdata);
      stream.next(m.heartrate);
      stream.next(m.spo2);
      stream.next(m.bk);
      stream.next(m.rsv1);
      stream.next(m.sdnn);
      stream.next(m.rmssd);
      stream.next(m.nn50);
      stream.next(m.pnn50);
      stream.next(m.rra);
      stream.next(m.rsv2);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct personData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qt_cmd_vel::personData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qt_cmd_vel::personData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "acdata: ";
    if (v.acdata.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.acdata.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int8_t>::stream(s, true ? std::string() : indent + "    ", v.acdata[i]);
    }
    if (v.acdata.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "heartrate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heartrate);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "spo2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spo2);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "bk: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bk);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rsv1: ";
    if (v.rsv1.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.rsv1.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.rsv1[i]);
    }
    if (v.rsv1.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sdnn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sdnn);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rmssd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rmssd);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "nn50: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nn50);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pnn50: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pnn50);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rra: ";
    if (v.rra.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.rra.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.rra[i]);
    }
    if (v.rra.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rsv2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rsv2);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QT_CMD_VEL_MESSAGE_PERSONDATA_H
