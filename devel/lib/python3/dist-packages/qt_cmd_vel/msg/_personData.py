# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qt_cmd_vel/personData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class personData(genpy.Message):
  _md5sum = "0b9dfbf73ccdfbf3d5b1a87f99434849"
  _type = "qt_cmd_vel/personData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 header        # 0xFF数据包头
int8[64] acdata     # 心律波形数据 (有符号)
uint8 heartrate     # 心率
uint8 spo2          # 血氧
uint8 bk            # 微循环
uint8[8] rsv1       # 保留数据 1
uint8 sdnn          # 心率变异性
uint8 rmssd
uint8 nn50
uint8 pnn50
uint8[6] rra        # RR间期
uint8 rsv2          # 保留数据 2
uint8 state         # 模块状态"""
  __slots__ = ['header','acdata','heartrate','spo2','bk','rsv1','sdnn','rmssd','nn50','pnn50','rra','rsv2','state']
  _slot_types = ['uint8','int8[64]','uint8','uint8','uint8','uint8[8]','uint8','uint8','uint8','uint8','uint8[6]','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,acdata,heartrate,spo2,bk,rsv1,sdnn,rmssd,nn50,pnn50,rra,rsv2,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(personData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = 0
      if self.acdata is None:
        self.acdata = [0] * 64
      if self.heartrate is None:
        self.heartrate = 0
      if self.spo2 is None:
        self.spo2 = 0
      if self.bk is None:
        self.bk = 0
      if self.rsv1 is None:
        self.rsv1 = b'\0'*8
      if self.sdnn is None:
        self.sdnn = 0
      if self.rmssd is None:
        self.rmssd = 0
      if self.nn50 is None:
        self.nn50 = 0
      if self.pnn50 is None:
        self.pnn50 = 0
      if self.rra is None:
        self.rra = b'\0'*6
      if self.rsv2 is None:
        self.rsv2 = 0
      if self.state is None:
        self.state = 0
    else:
      self.header = 0
      self.acdata = [0] * 64
      self.heartrate = 0
      self.spo2 = 0
      self.bk = 0
      self.rsv1 = b'\0'*8
      self.sdnn = 0
      self.rmssd = 0
      self.nn50 = 0
      self.pnn50 = 0
      self.rra = b'\0'*6
      self.rsv2 = 0
      self.state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.header
      buff.write(_get_struct_B().pack(_x))
      buff.write(_get_struct_64b().pack(*self.acdata))
      _x = self
      buff.write(_get_struct_3B().pack(_x.heartrate, _x.spo2, _x.bk))
      _x = self.rsv1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_8B().pack(*_x))
      else:
        buff.write(_get_struct_8s().pack(_x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.sdnn, _x.rmssd, _x.nn50, _x.pnn50))
      _x = self.rra
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_6B().pack(*_x))
      else:
        buff.write(_get_struct_6s().pack(_x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.rsv2, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.header,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 64
      self.acdata = _get_struct_64b().unpack(str[start:end])
      _x = self
      start = end
      end += 3
      (_x.heartrate, _x.spo2, _x.bk,) = _get_struct_3B().unpack(str[start:end])
      start = end
      end += 8
      self.rsv1 = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.sdnn, _x.rmssd, _x.nn50, _x.pnn50,) = _get_struct_4B().unpack(str[start:end])
      start = end
      end += 6
      self.rra = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.rsv2, _x.state,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.header
      buff.write(_get_struct_B().pack(_x))
      buff.write(self.acdata.tostring())
      _x = self
      buff.write(_get_struct_3B().pack(_x.heartrate, _x.spo2, _x.bk))
      _x = self.rsv1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_8B().pack(*_x))
      else:
        buff.write(_get_struct_8s().pack(_x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.sdnn, _x.rmssd, _x.nn50, _x.pnn50))
      _x = self.rra
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_6B().pack(*_x))
      else:
        buff.write(_get_struct_6s().pack(_x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.rsv2, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.header,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 64
      self.acdata = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=64)
      _x = self
      start = end
      end += 3
      (_x.heartrate, _x.spo2, _x.bk,) = _get_struct_3B().unpack(str[start:end])
      start = end
      end += 8
      self.rsv1 = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.sdnn, _x.rmssd, _x.nn50, _x.pnn50,) = _get_struct_4B().unpack(str[start:end])
      start = end
      end += 6
      self.rra = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.rsv2, _x.state,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_64b = None
def _get_struct_64b():
    global _struct_64b
    if _struct_64b is None:
        _struct_64b = struct.Struct("<64b")
    return _struct_64b
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_6s = None
def _get_struct_6s():
    global _struct_6s
    if _struct_6s is None:
        _struct_6s = struct.Struct("<6s")
    return _struct_6s
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_8s = None
def _get_struct_8s():
    global _struct_8s
    if _struct_8s is None:
        _struct_8s = struct.Struct("<8s")
    return _struct_8s
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
